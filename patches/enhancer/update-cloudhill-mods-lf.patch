--- mods/code-line-numbers/app.css	2021-10-01 17:52:45.989619800 +0700
+++ mods/code-line-numbers/app.css	2021-10-01 18:07:52.991158700 +0700
@@ -5,7 +5,7 @@
  * under the MIT license
  */
 
-.notion-code-block.line-numbers > div {
+.notion-code-block.line-numbers {
   position: relative;
 }
 
@@ -25,3 +25,6 @@
   overflow: hidden;
   pointer-events: none;
 }
+#code-line-numbers:empty {
+  display: none;
+}
--- mods/code-line-numbers/mod.js	2021-10-01 17:52:46.016628600 +0700
+++ mods/code-line-numbers/mod.js	2021-10-01 17:46:50.018548800 +0700
@@ -14,7 +14,7 @@
   tags: ['extension'],
   name: 'code line numbers',
   desc: 'adds line numbers to code blocks.',
-  version: '1.1.1',
+  version: '1.2.0',
   author: 'CloudHill',
   options: [
     {
@@ -44,23 +44,18 @@
 
         function handle(list) {
           queue = [];
-          for (let { addedNodes } of list) {
-            if (
-              addedNodes[0] &&
+          for (let { addedNodes, target } of list) {
+            const block = target.querySelector('.line-numbers.notion-code-block') ||
               (
-                addedNodes[0].className === 'notion-page-content' ||
-                (
-                  addedNodes[0].querySelector &&
-                  addedNodes[0].querySelector('.notion-code-block.line-numbers')
-                )
-              )
-            ) {
-              resizeObserver.disconnect();
-              const codeBlocks = document.querySelectorAll('.notion-code-block.line-numbers');
-              codeBlocks.forEach(block => {
+                addedNodes[0]?.classList?.contains('.notion-code-block') &&
+                addedNodes[0].querySelector('.line-numbers.notion-code-block')
+              );
+
+            if (block) {
+              if (block.dataset.numbered) return;
                 number(block);
+              block.dataset.numbered = true;
                 resizeObserver.observe(block);
-              });
             }
           }
         }
@@ -74,12 +69,14 @@
               '<span id="code-line-numbers"></span>'
             );
             
+            // set size
             const blockStyle = window.getComputedStyle(block.children[0]);
             numbers.style.top = blockStyle.paddingTop;
             numbers.style.bottom = blockStyle.paddingBottom;
             
             block.append(numbers);
 
+            // get lineHeight
             const temp = createElement('<span>A</span>');
             block.firstChild.append(temp);
             block.lineHeight = temp.getBoundingClientRect().height;
@@ -109,7 +106,7 @@
           
           if (store().single_lined || codeLineNumbers.length > 2) {
             block.firstChild.classList.add('code-numbered');
-            numbers.innerText = codeLineNumbers;
+            numbers.innerText = codeLineNumbers || 1;
           } else {
             block.firstChild.classList.remove('code-numbered');
             numbers.innerText = '';
--- mods/collapsible-headers/mod.js	2021-10-01 17:52:46.071619800 +0700
+++ mods/collapsible-headers/mod.js	2021-10-01 17:14:02.885841700 +0700
@@ -14,7 +14,7 @@
   tags: ['extension'],
   name: 'collapsible headers',
   desc: 'adds toggles to collapse header sections.',
-  version: '1.0.0',
+  version: '1.0.1',
   author: 'CloudHill',
   options: [
     {
@@ -92,15 +92,18 @@
             for (let { addedNodes } of list) {
               if (
                 addedNodes[0] &&
-                addedNodes[0].className === 'notion-page-content'
+                addedNodes[0].className === 'notion-presence-container'
               ) {
                 showSelectedHeader();
                 initHeaderToggles();
                 contentObserver.disconnect();
-                contentObserver.observe(addedNodes[0], {
+                contentObserver.observe(
+                  document.querySelector('.notion-page-content'), 
+                  {
                   childList: true,
                   subtree: true,
-                });
+                  }
+                );
               }
             }
           }
--- mods/scroll-to-top/app.css	2021-10-01 17:52:48.282771500 +0700
+++ mods/scroll-to-top/app.css	2021-10-01 13:13:32.760236400 +0700
@@ -36,7 +36,7 @@
   font-size: 20px;
 
   background: var(--theme--interactive_hover);
-  box-shadow: 0 0 0 0.5px var(--theme--interactive_hover-border);
+  box-shadow: var(--theme--box-shadow);
 }
 
 .notion-scroll-button {
@@ -55,6 +55,6 @@
 }
 
 .notion-scroll-button > svg {
-  width: 18px;
-  height: 18px;
+  width: 16px;
+  height: 16px;
 }
--- mods/scroll-to-top/arrow.svg	2021-10-01 17:52:48.303771500 +0700
+++ mods/scroll-to-top/arrow.svg	2021-10-01 18:14:30.481837600 +0700
@@ -1 +1 @@
-<svg xmlns="http://www.w3.org/2000/svg" width="250" height="250" fill="currentColor" viewBox="0 0 250 250"><path fill="currentColor" d="M102.683 234.52V110.968H67.5474L124.859 12.184L182.459 110.968H147.323V234.52H102.683Z"/></svg>
\ No newline at end of file
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 14"><polygon points="7,4.7 1.1,10.6 0,9.4 6.5,2.9 7,2.4 7.5,2.9 14,9.4 12.9,10.6"/></svg>
\ No newline at end of file
--- mods/scroll-to-top/mod.js	2021-10-01 17:52:48.326770500 +0700
+++ mods/scroll-to-top/mod.js	2021-10-01 13:26:03.213058800 +0700
@@ -17,7 +17,7 @@
   name: 'scroll to top',
   desc:
     'add an arrow above the help button to scroll back to the top of a page.',
-  version: '1.0.0',
+  version: '1.1.0',
   author: 'CloudHill',
   options: [
     {
@@ -97,7 +97,7 @@
             for (let { addedNodes } of list) {
               if (
                 addedNodes[0] &&
-                (addedNodes[0].className === 'notion-page-content' ||
+                (addedNodes[0].className === 'notion-presence-container' ||
                   addedNodes[0].className === 'notion-scroller') &&
                 top > 0
               ) {
--- mods/simpler-databases/app.css	2021-10-01 17:52:48.479771000 +0700
+++ mods/simpler-databases/app.css	2021-10-01 16:52:32.235259400 +0700
@@ -170,13 +170,16 @@
   transform: rotateZ(90deg);
 }
 
-.notion-collection_view-block[data-tweaks*="[toggle]"] > .notion-scroller {
+.notion-collection_view-block[data-tweaks*="[toggle]"] > div > .notion-scroller {
   transition: height 200ms ease-in, opacity 200ms ease-in;
 }
-.notion-collection_view-block[data-tweaks*="[toggle]"][data-toggled-hidden="true"] > .notion-scroller {
+.notion-collection_view-block[data-tweaks*="[toggle]"][data-toggled-hidden="true"] > div > .notion-scroller {
   opacity: 0;
   height: 0 !important;
 }
+
+.notion-collection_view-block[data-tweaks*="[toggle]"][data-toggled-hidden="true"]
+  [data-hide-items] [class$="view"] > .notion-collection_view-block,
 .notion-collection_view-block[data-tweaks*="[toggle]"][data-toggled-hidden="true"]
   [data-hide-items] .notion-collection-item {
   display: none !important;
@@ -237,7 +240,7 @@
 .notion-collection_view-block[data-tweaks]:not([data-tweaks*="[new_item]"])
   .notion-list-view > .notion-collection_view-block > [role="button"]:not(.notion-collection-item),
 .notion-collection_view-block[data-tweaks]:not([data-tweaks*="[new_item]"])
-  .notion-gallery-view > .notion-collection_view-block > [role="button"]:not(.notion-collection-item) {
+  .notion-gallery-view > .notion-collection_view-block [style*="grid"] > [role="button"] {
   display: none !important;
 }
 .notion-collection_view-block[data-tweaks]:not([data-tweaks*="[new_item]"])
--- mods/simpler-databases/mod.js	2021-10-01 17:52:48.510770700 +0700
+++ mods/simpler-databases/mod.js	2021-10-01 16:50:18.567111400 +0700
@@ -14,7 +14,7 @@
   tags: ['extension'],
   name: 'simpler databases',
   desc: 'adds a menu to inline databases to toggle ui elements.',
-  version: '1.0.0',
+  version: '1.0.2',
   author: 'CloudHill',
   hacks: {
     'renderer/preload.js'(store, __exports) {
@@ -157,7 +157,7 @@
           for (let { addedNodes } of list) {
             if (
               addedNodes[0] &&
-              addedNodes[0].className === 'notion-page-content'
+              addedNodes[0].className === 'notion-presence-container'
             ) {
               findInlineCollections();
               contentObserver.disconnect();
